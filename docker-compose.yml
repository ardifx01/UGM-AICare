# docker-compose.yml (Place in project root)

services:
  #################
  # Database (PostgreSQL)
  #################
  db:
    image: postgres:15-alpine # Using Alpine for smaller size
    container_name: ugm_aicare_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-aicare_db} # Use default if not set in .env
      POSTGRES_USER: ${POSTGRES_USER:-aicare_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-aicare_password}
    volumes:
      - pgdata:/var/lib/postgresql/data # Persist data
    ports:
      - "${POSTGRES_PORT_EXTERNAL:-5432}:5432" # Expose only if direct DB access from host is needed
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-aicare_user} -d $${POSTGRES_DB:-aicare_db}"] # $$ to escape $ for shell
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aicare_network

  #################
  # Cache (Redis)
  #################
  redis:
    image: redis:7-alpine
    container_name: ugm_aicare_redis
    ports:
      - "${REDIS_PORT_EXTERNAL:-6379}:6379" # Expose only if direct Redis access from host is needed
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aicare_network

  #################
  # Backend (FastAPI)
  #################
  backend:
    container_name: ugm_aicare_backend
    build:
      context: ./backend # Path to directory containing Dockerfile
      dockerfile: app/Dockerfile
      # Add build arguments if needed by the backend Dockerfile
      # args:
      #   SOME_BUILD_ARG: ${SOME_BUILD_ARG_FROM_ENV}
    ports:
      - "8000:8000" # Map to host port 8000
    # No source code volumes for production, code is in the image
    env_file:
      - .env # Load environment variables from .env file in root
    environment:
      # Ensure backend connects to containerized DB and Redis
      DATABASE_URL: postgresql://${POSTGRES_USER:-aicare_user}:${POSTGRES_PASSWORD:-aicare_password}@${POSTGRES_HOST:-db}:5432/${POSTGRES_DB:-aicare_db}
      FRONTEND_URL: ${FRONTEND_URL:-https://aicare.ina17.com} # Use service name for internal communication
      BACKEND_URL: ${BACKEND_URL:-http://apiaicare.ina17.com} # Use service name for internal communication
      REDIS_HOST: redis # Service name defined above
      REDIS_PORT: 6379 # Default Redis port inside Docker network
      APP_ENV: production # Explicitly set for production
      PYTHONPATH: /app # Make sure Python can find modules in /app
      # WORKERS_PER_CORE: 4 # Example for Gunicorn workers, can be set in .env
    depends_on:
      db:
        condition: service_healthy # Wait for db to be ready
      redis:
        condition: service_healthy # Wait for redis to be ready
    restart: unless-stopped
    # The command is now handled by start.sh (ENTRYPOINT in Dockerfile)
    networks:
      - aicare_network

  #################
  # Frontend (Next.js)
  #################
  frontend:
    container_name: ugm_aicare_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production # Ensure the 'production' stage is built and run
      args:
        # Pass build arguments for NEXT_PUBLIC_ variables
        # These values should be in your .env file or set in the VM's environment
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-apiaicare.ina17.com} # Backend runs on 8000
        NEXTAUTH_URL: ${NEXTAUTH_URL:-aicare.ina17.com} # Default to production URL
    ports:
      - "4000:3000" # Map host port 4000 to container port 3000
    # No source code volumes for production
    env_file:
      - .env # For any runtime ENV vars Next.js server might need
    environment:
      NODE_ENV: production # Already set in Dockerfile, but good for clarity
      PORT: 3000
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET} 
      NEXTAUTH_URL: ${NEXTAUTH_URL:-aicare.ina17.com} # Default to production URL
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-apiaicare.ina17.com} # Ensure this matches backend URL
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
    depends_on:
      - backend # Optional, if frontend needs backend to be up for some server-side rendering logic
    restart: unless-stopped
    # The command is now handled by CMD in the Dockerfile's production stage
    networks:
      - aicare_network

# Define named volumes for data persistence
volumes:
  pgdata: # PostgreSQL data

networks:
  aicare_network:
    # driver: bridge
    # external: true
    
