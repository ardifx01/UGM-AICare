services:
  #################
  # Database (PostgreSQL)
  #################
  db:
    image: postgres:16-alpine # Using Alpine for smaller size
    container_name: ugm_aicare_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB} # Use default if not set in .env
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data # Persist data
    ports:
      - "${POSTGRES_PORT_EXTERNAL:-5432}:5432" # Expose only if direct DB access from host is needed
    restart: unless-stopped
    healthcheck:
      # Forcing the healthcheck to use TCP via localhost makes it a more reliable
      # indicator that the database is ready for network connections from other containers.
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${POSTGRES_USER:-aicare_user} -d ${POSTGRES_DB:-aicare_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal_network # Only on the internal network


  #################
  # Cache (Redis)
  #################
  redis:
    image: redis/redis-stack-server:latest
    container_name: ugm_aicare_redis
    volumes:
      - redisdata:/data
    ports:
      - "${REDIS_PORT_EXTERNAL:-6379}:6379" # Expose only if direct Redis access from host is needed
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - internal_network # Only on the internal network

  #################
  # Migration Service
  #################
  migrate:
    container_name: ugm_aicare_migrate
    build:
      context: ./backend
      dockerfile: app/Dockerfile
    # This command overrides the image's entrypoint.
    # It waits for the DB, runs migrations, and then exits.
    entrypoint: >
      bash -c "
        /app/scripts/wait-for-it.sh db:5432 -t 60 -- echo 'Database is ready!' && 
        echo 'Running Alembic migrations...' &&
        alembic upgrade head
      "
    env_file:
      - .env
    environment:
      PYTHONPATH: /app
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - internal_network # Only needs internal access to the DB

  #################
  # Backend (FastAPI)
  #################
  backend:
    container_name: ugm_aicare_backend
    build:
      context: ./backend # Path to directory containing Dockerfile
      dockerfile: app/Dockerfile
    # entrypoint: tail -f /dev/null
    ports:
      - "8000:8000" # Map to host port 8000
    # No source code volumes for production, code is in the image
    env_file:
      - .env # Load environment variables from .env file in root
    environment:
      # Ensure backend connects to containerized DB and Redis
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      FRONTEND_URL: http://frontend:4000
      BACKEND_URL: ${BACKEND_URL:-https://apiaicare.ina17.com} # Use service name for internal communication
      ALLOWED_ORIGINS: >
        ["https://aicare.ina17.com",
        "http://localhost:4000",
        "http://127.0.0.1:4000",
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://frontend:4000",
        "http://backend:8000"]
      REDIS_HOST: redis # Service name defined above
      REDIS_PORT: 6379 # Default Redis port inside Docker network
      REDIS_USERNAME: ""
      REDIS_PASSWORD: ""
      REDIS_URL: ""
      APP_ENV: production # Explicitly set for production
      PYTHONPATH: /app # Make sure Python can find modules in /app
      # WORKERS_PER_CORE: 4 # Example for Gunicorn workers, can be set in .env
    depends_on:
      migrate:
        condition: service_completed_successfully
      db:
        condition: service_healthy # Wait for db to be ready
      redis:
        condition: service_healthy # Wait for redis to be ready
    restart: unless-stopped
    networks:
      # aicare_network:
      #   ipv4_address: 10.10.1.114
      internal_network: {} # Also on the internal network to talk to db/redis
      # shared_services_network: {} # Commented out - Attached to shared network to talk to gemma_service
    dns: 8.8.8.8

  #################
  # Frontend (Next.js)
  #################
  frontend:
    container_name: ugm_aicare_frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production # Ensure the 'production' stage is built and run
      args:
        # Pass build arguments for NEXT_PUBLIC_ variables
        # These values should be in your .env file or set in the VM's environment
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-https://apiaicare.ina17.com} # Backend runs on 8000
        NEXTAUTH_URL: ${NEXTAUTH_URL:-https://aicare.ina17.com} # Default to production URL
    ports:
      - "4000:3000" # Map host port 4000 to container port 3000
    # No source code volumes for production
    env_file:
      - .env # For any runtime ENV vars Next.js server might need
    environment:
      NODE_ENV: production # Already set in Dockerfile, but good for clarity
      PORT: 3000
      INTERNAL_API_URL: http://backend:8000
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
    depends_on:
      - backend # Optional, if frontend needs backend to be up for some server-side rendering logic
    restart: unless-stopped
    networks:
      - internal_network # Add frontend to the same network as backend
    # The command is now handled by CMD in the Dockerfile's production stage
    # networks:
    #   aicare_network:
    #     ipv4_address: 10.10.1.115

# Define named volumes for data persistence
volumes:
  pgdata:       # PostgreSQL data
  redisdata:    # Redis data
  # prometheus_data:
  # grafana_data:

networks:
  # aicare_network:
  #   external: true
  internal_network: # This is our new, internal-only bridge network
    driver: bridge
  # shared_services_network:
  #   external: true

