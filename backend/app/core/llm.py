# backend/app/core/llm.py

import os
import httpx # Use httpx for async requests to Together AI
import google.generativeai as genai # type: ignore
from google.generativeai.types import HarmCategory, HarmBlockThreshold # type: ignore
from dotenv import load_dotenv
import logging
from typing import List, Dict, Literal, Optional

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Configuration ---
TOGETHER_API_KEY = os.environ.get("TOGETHER_API_KEY")
GOOGLE_API_KEY = os.environ.get("GOOGLE_GENAI_API_KEY")

TOGETHER_API_URL = "https://api.together.xyz/v1/chat/completions"
DEFAULT_TOGETHER_MODEL = "meta-llama/Llama-3-8b-chat-hf"
# Choose a Gemini model - 2.0 Flash is fast and capable, Pro is more powerful
DEFAULT_GEMINI_MODEL = "gemini-2.0-flash" 

# Configure Gemini client (do this once at module load)
if GOOGLE_API_KEY:
    try:
        genai.configure(api_key=GOOGLE_API_KEY)
        logger.info("Google Generative AI SDK configured successfully.")
    except Exception as e:
        logger.error(f"Failed to configure Google Generative AI SDK: {e}")
else:
    logger.warning("GOOGLE_API_KEY not found. Gemini API will not be available.")

# --- Provider Type ---
LLMProvider = Literal['togetherai', 'gemini']

# --- Helper: Convert Generic History to Gemini Format ---
# Gemini expects alternating user/model roles, and uses 'model' instead of 'assistant'
def _convert_history_for_gemini(history: List[Dict[str, str]]) -> List[Dict[str, str]]:
    gemini_history = []
    for msg in history:
        role = msg.get('role')
        content = msg.get('content')
        if role == 'assistant':
            gemini_history.append({'role': 'model', 'parts': [content]})
        elif role == 'user':
            gemini_history.append({'role': 'user', 'parts': [content]})
        # Silently ignore system messages for now, or handle as needed
        # elif role == 'system':
            # Gemini doesn't have a direct 'system' role in the chat history array like OpenAI/Together.
            # System prompts are often handled differently (e.g., in `GenerativeModel` constructor or passed separately).
            # For simplicity here, we'll omit them from the direct history conversion.
            # logger.warning("System messages are not directly passed in Gemini history.")
    # Ensure history ends with a user message if the last message added was 'model'
    # This might be handled by the calling function ensuring the *new* prompt is the last item.
    return gemini_history


# --- Together AI Function (Async) ---
async def generate_togetherai_response(
    history: List[Dict[str, str]],
    model: str = DEFAULT_TOGETHER_MODEL,
    max_tokens: int = 512,
    temperature: float = 0.7,
    system_prompt: Optional[str] = None # Add system prompt handling
) -> str:
    """Generates a response using the Together AI API (async)."""
    if not TOGETHER_API_KEY:
        logger.error("TOGETHER_API_KEY not configured.")
        raise ValueError("Together AI API key not configured.")

    headers = {
        "Authorization": f"Bearer {TOGETHER_API_KEY}",
        "Content-Type": "application/json",
    }
    
    # Prepend system prompt if provided
    messages = history
    if system_prompt:
        messages = [{"role": "system", "content": system_prompt}] + messages

    data = {
        "model": model,
        "messages": messages,
        "max_tokens": max_tokens,
        "temperature": temperature,
        # "stop": ["</s>", "[/INST]"] # Add stop sequences if needed for your Llama3 variant
    }

    async with httpx.AsyncClient(timeout=60.0) as client: # Use httpx.AsyncClient
        try:
            logger.info(f"Sending request to Together AI (Model: {model})")
            response = await client.post(TOGETHER_API_URL, headers=headers, json=data)
            response.raise_for_status()

            result = response.json()

            if "choices" in result and len(result["choices"]) > 0:
                content = result['choices'][0].get('message', {}).get('content')
                if content:
                    logger.info("Received response from Together AI.")
                    return content.strip()
                else:
                    logger.warning(f"Unexpected response structure from Together AI: {result}")
                    return "Error: Could not parse response from Together AI."
            else:
                logger.warning(f"No choices found in Together AI response: {result}")
                return f"Error: No response generated by Together AI. API Response: {result}"

        except httpx.RequestError as e:
            logger.error(f"HTTP error calling Together AI API: {e}")
            return f"Error: Failed to connect to Together AI API. {e}"
        except httpx.HTTPStatusError as e:
             logger.error(f"Together AI API returned error status {e.response.status_code}: {e.response.text}")
             return f"Error: Together AI API failed ({e.response.status_code}). Please check logs."
        except Exception as e:
            logger.error(f"An unexpected error occurred with Together AI: {e}", exc_info=True)
            return f"Error: An unexpected error occurred. {e}"


# --- Gemini API Function (Async) ---
async def generate_gemini_response(
    history: List[Dict[str, str]],
    model: str = DEFAULT_GEMINI_MODEL,
    max_tokens: int = 512,
    temperature: float = 0.7,
    system_prompt: Optional[str] = None # Add system prompt handling
) -> str:
    """Generates a response using the Google Gemini API (async)."""
    if not GOOGLE_API_KEY:
        # The warning during initial module load already indicated if the key was missing.
        # This check prevents proceeding if the key was definitely not provided.
        logger.error("Attempted to use Gemini, but GOOGLE_API_KEY was not found in environment.")
        raise ValueError("Google API key not configured.")

    try:
        logger.info(f"Sending request to Gemini API (Model: {model})")

        # Handle system prompt - Gemini Pro API has specific 'system_instruction' parameter
        gemini_model_args = {"model_name": model}
        if system_prompt:
             gemini_model_args["system_instruction"] = system_prompt
        
        gemini_model = genai.GenerativeModel(**gemini_model_args)

        # Convert history and extract the latest user prompt
        if not history or history[-1]['role'] != 'user':
             return "Error: Conversation history must end with a user message."
        
        last_user_prompt = history[-1]['content']
        gemini_history = _convert_history_for_gemini(history[:-1]) # Pass history *before* the last prompt

        generation_config = genai.types.GenerationConfig(
            max_output_tokens=max_tokens,
            temperature=temperature
        )

        # Basic safety settings (adjust as needed)
        safety_settings = {
            HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
            HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
        }

        # Start a chat session if there's history
        chat_session = None
        if gemini_history:
             chat_session = gemini_model.start_chat(history=gemini_history)
             response = await chat_session.send_message_async( # Use async method
                 last_user_prompt,
                 generation_config=generation_config,
                 safety_settings=safety_settings,
                 # stream=False # Set to True for streaming later
             )
        else:
             # If no history, just generate content from the single prompt
             response = await gemini_model.generate_content_async( # Use async method
                 last_user_prompt, # Send only the last user prompt
                 generation_config=generation_config,
                 safety_settings=safety_settings,
                 # stream=False
             )


        # Handle potential blocks or errors (check response structure)
        try:
            # Accessing response.text might raise ValueError if blocked
            response_text = response.text
            logger.info("Received response from Gemini API.")
            logger.info("System Prompt: " + system_prompt)
            logger.info("User Prompt: " + last_user_prompt)
            return response_text.strip()
        except ValueError as e:
            # This often indicates blocked content or unusual finish reason
            logger.warning(f"Gemini response might be blocked or empty: {e}. Checking feedback/candidates.")
            if response.prompt_feedback and response.prompt_feedback.block_reason:
                 reason = response.prompt_feedback.block_reason.name
                 logger.warning(f"Gemini request blocked. Reason: {reason}")
                 return f"Error: Request blocked by safety filters ({reason}). Please rephrase your prompt."
            elif response.candidates and response.candidates[0].finish_reason != 'STOP':
                 reason = response.candidates[0].finish_reason.name
                 logger.warning(f"Gemini generation stopped unexpectedly. Reason: {reason}")
                 return f"Error: Generation stopped ({reason})."
            else:
                 logger.warning(f"Gemini returned empty or invalid response. Full response obj: {response}")
                 return "Error: Received an empty or invalid response from Gemini."
        
    except Exception as e:
        logger.error(f"Error calling Gemini API: {e}", exc_info=True)
        # More specific error handling can be added based on google.api_core.exceptions
        return f"Error: An unexpected error occurred with Gemini API. {e}"


# --- Unified Generation Function (Async) ---
async def generate_response(
    history: List[Dict[str, str]],
    provider: LLMProvider = "togetherai", # Default provider
    model: Optional[str] = None,
    max_tokens: int = 512,
    temperature: float = 0.7,
    system_prompt: Optional[str] = None # Pass system prompt through
) -> str:
    """
    Generates a response using the specified LLM provider (async).

    Args:
        history: The conversation history (list of {'role': str, 'content': str}).
                 Must end with a 'user' message.
        provider: The LLM provider ('togetherai' or 'gemini').
        model: The specific model name (optional, uses default for provider if None).
        max_tokens: Maximum number of tokens to generate.
        temperature: Controls randomness (0.0-1.0+).
        system_prompt: An optional system prompt.

    Returns:
        The generated text response string or an error message.
    """
    logger.info(f"Generating response using provider: {provider}")

    if not history or history[-1].get('role') != 'user':
        logger.error("Invalid history: Must not be empty and end with a 'user' message.")
        return "Error: Invalid conversation history provided."

    try:
        if provider == "togetherai":
            if not model:
                model = DEFAULT_TOGETHER_MODEL
            return await generate_togetherai_response(
                history=history, model=model, max_tokens=max_tokens, temperature=temperature, system_prompt=system_prompt
            )
        elif provider == "gemini":
            if not GOOGLE_API_KEY:
                logger.error("Attempted to use Gemini, but GOOGLE_API_KEY is not set.")
                return "Error: Gemini API key not configured. Cannot use Gemini provider."
            if not model:
                model = DEFAULT_GEMINI_MODEL
            return await generate_gemini_response(
                history=history, model=model, max_tokens=max_tokens, temperature=temperature, system_prompt=system_prompt
            )
        else:
            # This case should ideally be prevented by Pydantic/FastAPI validation
            logger.error(f"Invalid provider specified: {provider}")
            raise ValueError(f"Invalid LLM provider: {provider}. Choose 'togetherai' or 'gemini'.")
    except ValueError as ve: # Catch config errors etc.
        logger.error(f"Configuration or value error: {ve}")
        return str(ve) # Return the error message directly
    except Exception as e:
        logger.error(f"Unexpected error during response generation: {e}", exc_info=True)
        return "Error: An unexpected internal error occurred while generating the response."

# --- Constants for default models (can be imported elsewhere) ---
DEFAULT_PROVIDERS = {
    "togetherai": DEFAULT_TOGETHER_MODEL,
    "gemini": DEFAULT_GEMINI_MODEL
}