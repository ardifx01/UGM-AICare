"""
Langchain Chains for UGM-AICare Agents

This module defines the specific chains that the Analytics, Intervention,
and Triage agents will use to perform their core LLM-powered tasks.
"""

from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import JsonOutputParser
from langchain_core.pydantic_v1 import BaseModel, Field
from typing import List

from .llm import llm # Assuming llm.py provides a configured Langchain LLM object

# --- Analytics Agent Chains ---

class Insight(BaseModel):
    """Data model for a single insight generated by the Analytics Agent."""
    description: str = Field(description="A concise description of the insight or trend.")
    severity: str = Field(description="The severity of the trend. Must be one of 'low', 'medium', or 'high'.")
    recommendation: str = Field(description="A recommended action or intervention based on the insight.")

class AnalyticsInsights(BaseModel):
    """Data model for the output of the analytics insight generation chain."""
    insights: List[Insight] = Field(description="A list of insights generated from the data.")

def create_analytics_insight_chain():
    """Creates a chain that generates insights from analytics data."""
    parser = JsonOutputParser(pydantic_object=AnalyticsInsights)

    prompt = ChatPromptTemplate.from_messages([
        ("system", "You are an expert mental health data analyst. Your task is to analyze the provided summary of user interaction data and identify key trends, patterns, and insights. Focus on actionable insights that could inform proactive interventions. Respond with a JSON object containing a list of insights, where each insight has a 'description', 'severity', and 'recommendation'."),
        ("human", "Here is the data summary:\n\n{data_summary}\n\nPlease generate insights based on this data."),
        ("system", "{format_instructions}"),
    ]).partial(format_instructions=parser.get_format_instructions())

    chain = prompt | llm | parser
    return chain

# --- Intervention Agent Chains ---

class CampaignContent(BaseModel):
    """Data model for the content of an intervention campaign."""
    title: str = Field(description="The title of the campaign.")
    description: str = Field(description="A brief description of the campaign's purpose.")
    message: str = Field(description="The message to be sent to the target audience.")

def create_intervention_content_chain():
    """Creates a chain that generates content for an intervention campaign."""
    parser = JsonOutputParser(pydantic_object=CampaignContent)

    prompt = ChatPromptTemplate.from_messages([
        ("system", "You are an expert in mental health communication. Your task is to create engaging and supportive content for an intervention campaign based on the provided type and target audience description. Respond with a JSON object containing 'title', 'description', and 'message'."),
        ("human", "Campaign Type: {campaign_type}\nTarget Audience: {target_audience_description}\n\nPlease generate the campaign content."),
        ("system", "{format_instructions}"),
    ]).partial(format_instructions=parser.get_format_instructions())

    chain = prompt | llm | parser
    return chain

# --- Triage Agent Chains ---

class TriageClassification(BaseModel):
    """Data model for the output of the triage classification chain."""
    severity: str = Field(description="The severity level of the conversation. Must be one of 'low', 'medium', 'high', or 'critical'.")
    category: str = Field(description="The primary category of the user's issue (e.g., 'anxiety', 'depression', 'academic_stress', 'relationships').")
    is_crisis: bool = Field(description="Whether the conversation indicates an immediate crisis situation.")

def create_triage_classification_chain():
    """Creates a chain that classifies a conversation for the Triage Agent."""
    parser = JsonOutputParser(pydantic_object=TriageClassification)

    prompt = ChatPromptTemplate.from_messages([
        ("system", "You are an expert mental health triage assistant. Your task is to classify the following conversation based on its severity, category, and crisis level. Respond with a JSON object containing 'severity', 'category', and 'is_crisis' fields based on the provided format instructions."),
        ("human", "Here is the conversation history:\n\n{conversation_history}\n\nPlease classify this conversation."),
        ("system", "{format_instructions}"),
    ]).partial(format_instructions=parser.get_format_instructions())

    chain = prompt | llm | parser
    return chain

# --- Example Usage (for testing) ---

if __name__ == "__main__":
    # --- Test Triage Chain ---
    triage_chain = create_triage_classification_chain()
    sample_conversation = "User: I'm feeling really overwhelmed with my exams. I can't sleep and I'm constantly worried.\nAI: It sounds like you're under a lot of pressure. Have you tried any relaxation techniques?"
    classification = triage_chain.invoke({"conversation_history": sample_conversation})
    print("--- Triage Classification Chain Test ---")
    print(f"Sample Conversation: {sample_conversation}")
    print(f"Generated Classification: {classification}")

    # --- Test Analytics Chain ---
    analytics_chain = create_analytics_insight_chain()
    sample_data_summary = "Over the past week, there has been a 30% increase in conversations categorized as 'anxiety' and a 15% decrease in user engagement during weekends."
    insights = analytics_chain.invoke({"data_summary": sample_data_summary})
    print("\n--- Analytics Insight Generation Chain Test ---")
    print(f"Sample Data Summary: {sample_data_summary}")
    print(f"Generated Insights: {insights}")

    # --- Test Intervention Chain ---
    intervention_chain = create_intervention_content_chain()
    campaign_type = "wellness_check"
    target_audience = "Students showing signs of burnout and low engagement."
    content = intervention_chain.invoke({"campaign_type": campaign_type, "target_audience_description": target_audience})
    print("\n--- Intervention Content Generation Chain Test ---")
    print(f"Campaign Type: {campaign_type}")
    print(f"Target Audience: {target_audience}")
    print(f"Generated Content: {content}")